//SetGameType returns which game mode should be used for which map prefix
//You can do whatever you want with this. You can even use Options
// (options => the ?blah=blah things added after the map name when launching a server or in the map list)
//to add even more variety. See the ParseOption function in Src\Engine\Classes\GameInfo.uc
var config array<GameTypePrefix>	SDKPrefixes;

static event class<GameInfo> SetGameType(string MapName, string Options, string Portal)
{
    local string ThisMapPrefix;
    local int i,pos;
    local class<GameInfo> NewGameType;

    LogAlwaysInternal("SetGameType is being called on"@default.Class);

    MapName = StripPlayOnPrefix( MapName );

    // replace self with appropriate gametype if no game specified
    pos = InStr(MapName,"-");
    ThisMapPrefix = left(MapName,pos);

    for (i = 0; i < default.SDKPrefixes.length; i++)
    {
        if (default.SDKPrefixes[i].Prefix ~= ThisMapPrefix)
        {
            NewGameType = class<GameInfo>(DynamicLoadObject(default.SDKPrefixes[i].GameType,class'Class'));
            if ( NewGameType != None )
            {
                return NewGameType;
            }
        }
    }

    return super.SetGameType(MapName, Options, Portal);
}


function bool FindInactivePRI(PlayerController PC)
{
    local bool bIsConsole;
    local string NewNetworkAddress;
    local int i;
    local PlayerReplicationInfo OldPRI, CurrentPRI;


    if (PC.PlayerReplicationInfo.bOnlySpectator)
    {
        return false;
    }

    bIsConsole = WorldInfo.IsConsoleBuild();
    NewNetworkAddress = PC.PlayerReplicationInfo.SavedNetworkAddress;

    for (i = 0; i < InactivePRIArray.Length; i++)
    {
        CurrentPRI = InactivePRIArray[i];

        if ((CurrentPRI == None) || CurrentPRI.bDeleteMe)
        {
            InactivePRIArray.Remove(i, 1);
            i--;
        }
        else if ((bIsConsole && CurrentPRI.UniqueId == PC.PlayerReplicationInfo.UniqueId) ||
                 (!bIsConsole && CurrentPRI.SavedNetworkAddress ~= NewNetworkAddress))
        {
            // found it!
            OldPRI = PC.PlayerReplicationInfo;
            PC.PlayerReplicationInfo = CurrentPRI;
            PC.PlayerReplicationInfo.SetOwner(PC);
            PC.PlayerReplicationInfo.RemoteRole = ROLE_SimulatedProxy;
            PC.PlayerReplicationInfo.Lifespan = 0;
            OverridePRI(PC, OldPRI);
            WorldInfo.GRI.AddPRI(PC.PlayerReplicationInfo);
            InactivePRIArray.Remove(i, 1);
            OldPRI.bIsInactive = true;
            OldPRI.Destroy();
            return true;
        }
    }
    return false;
}


DefaultProperties
{
    PlayerControllerClass=class'`{GAMEMODE}PlayerController'
    DefaultPawnClass=class'`{GAMEMODE}Pawn'

    HUDType=class'`{GAMEMODE}HUD'

    PlayerReplicationInfoClass=class'`{GAMEMODE}PRI'

    //This is the name that shows in the server browser for this mod:
    ModDisplayString="ImbaMod"

    Families.Empty;

    // do some initialization work here
    Families(ECLASS_Archer)=class'ImbaModFamilyInfo_Agatha_Archer'
    Families(ECLASS_ManAtArms)=class'ImbaModFamilyInfo_Agatha_ManAtArms'
    Families(ECLASS_Vanguard)=class'ImbaModFamilyInfo_Agatha_Vanguard'
    Families(ECLASS_Knight)=class'ImbaModFamilyInfo_Agatha_Knight'
    Families(ECLASS_SiegeEngineer)=class'ImbaModFamilyInfo_Agatha_Archer'

    Families(5)=class'ImbaModFamilyInfo_Mason_Archer'
    Families(6)=class'ImbaModFamilyInfo_Mason_ManAtArms'
    Families(7)=class'ImbaModFamilyInfo_Mason_Vanguard'
    Families(8)=class'ImbaModFamilyInfo_Mason_Knight'
    Families(9)=class'ImbaModFamilyInfo_Mason_Archer'


    MinimumRespawnTime = 10.0f
    bDisableTeamDamagePenalty = true
}
