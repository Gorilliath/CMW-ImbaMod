// Ranked Mode
var globalconfig bool bRankedMode;
var bool bRankedModeReadyToStartMatch;
var RankedAPI RankedAPI;


//SetGameType returns which game mode should be used for which map prefix
//You can do whatever you want with this. You can even use Options
// (options => the ?blah=blah things added after the map name when launching a server or in the map list)
//to add even more variety. See the ParseOption function in Src\Engine\Classes\GameInfo.uc
var config array<GameTypePrefix> SDKPrefixes;

static event class<GameInfo> SetGameType(string MapName, string Options, string Portal)
{
    local string ThisMapPrefix;
    local int i,pos;
    local class<GameInfo> NewGameType;

    LogAlwaysInternal("SetGameType is being called on"@default.Class);

    MapName = StripPlayOnPrefix( MapName );

    // replace self with appropriate gametype if no game specified
    pos = InStr(MapName,"-");
    ThisMapPrefix = left(MapName,pos);

    for (i = 0; i < default.SDKPrefixes.length; i++)
    {
        if (default.SDKPrefixes[i].Prefix ~= ThisMapPrefix)
        {
            NewGameType = class<GameInfo>(DynamicLoadObject(default.SDKPrefixes[i].GameType, class'Class'));
            if ( NewGameType != None )
            {
                return NewGameType;
            }
        }
    }

    return super.SetGameType(MapName, Options, Portal);
}

event InitGame(string Options, out string ErrorMessage)
{
    super.InitGame(Options, ErrorMessage);

    RankedAPI = new class'RankedAPI';

    if (bTournamentMode && bRankedMode)
    {
        ConfigureTournamentMode(false);
        ConfigureRankedMode(false);
        WorldInfo.ServerTravel("?restart", false);
    }

    if (bRankedMode)
    {
        // Autobalance
        bAutoBalance = false;
        bDeathBasedAutoBalance = false;
        AOCGRI(GameReplicationInfo).bBalanceTeams = false;

        bUseMaxPingLimit = false;
        bDisableTeamDamagePenalty = true;
        bAdminCanPause = true;
        bAnyUserCanGetSteamID = true;
    }
}

function RenameRankedPlayer(HttpRequestInterface OriginalRequest, HttpResponseInterface Response, bool bDidSucceed)
{
    local JsonObject data;
    local string id;
    local int elo;
    local string name;
    local AOCPlayerController controller;

    if (Response == none || !bDidSucceed)
        return;

    data = class'JsonObject'.static.DecodeJson(Response.GetContentAsString())
                                   .GetObject("response")
                                   .GetObject("items")
                                   .ObjectArray[0];

    id = data.GetStringValue("_id");
    elo = data.GetIntValue("elo");
    name = data.GetStringValue("name");

    // Find the relevant controller
    foreach WorldInfo.AllControllers(class'AOCPlayerController', controller)
    {
        // If the IDs match then rename and exit early
        if (OnlineSubsystemSteamworks(controller.OnlineSub).UniqueNetIdToInt64(controller.PlayerReplicationInfo.UniqueId) == id)
        {
            WorldInfo.Game.ChangeName(controller, "[" $ elo $ "]" @ name, true);
            break;
        }
    }
}

function GenericPlayerInitialization(Controller C)
{
    super.GenericPlayerInitialization(C);

    if (bRankedMode)
        RankedAPI.OnUserConnect(OnlineSubsystemSteamworks(PlayerController(C).OnlineSub).UniqueNetIdToInt64(C.PlayerReplicationInfo.UniqueId), RenameRankedPlayer);
}

function Logout(Controller Exiting)
{
    super.Logout(Exiting);

    if (bRankedMode)
        RankedAPI.OnUserDisconnect(OnlineSubsystemSteamworks(PlayerController(Exiting).OnlineSub).UniqueNetIdToInt64(Exiting.PlayerReplicationInfo.UniqueId));
}

function bool ShouldCountDown()
{
    local int AgathaSize, MasonSize;
    local int AgathaMod, MasonMod;
    local int AgathiansReady, MasonsReady;
    local int CorrectedAgathaSize, CorrectedMasonSize;
    local bool bCanSpawn;
    local bool bEachTeamHasAtleastOnePlayer;

    local Controller C;
    local AOCPlayerController PC;

    AgathaMod = 0;
    MasonMod = 0;
    foreach WorldInfo.AllControllers(class'Controller', C)
    {
        PC = AOCPlayerController(C);
        bCanSpawn = (PC != none && PC.CurrentFamilyInfo != none && PC.bReady) || AOCAIController(C) != none;

        if(CMWTO2GRI(GameReplicationInfo) != none && AOCAIController(C) != none)
        {
            //bots cannot trigger countdown in TO2 (is breaking horde-type maps)
            continue;
        }
        
        if(!bCanSpawn)
        {
            continue;
        }

        if (AOCPRI(C.PlayerReplicationInfo).IsOnTeam(EAOCFaction(Teams[0].TeamIndex)))
        {
            AgathaSize += 1;

            if(PC.IsVoluntarySpectator())
            {
                AgathaMod += 1;
            }
            else if(PC.bTournamentReady)
            {
                AgathiansReady += 1;
            }
        }
        else if (AOCPRI(C.PlayerReplicationInfo).IsOnTeam(EAOCFaction(Teams[1].TeamIndex)))
        {
            MasonSize += 1;

            if(PC.IsVoluntarySpectator())
            {
                MasonMod += 1;
            }
            else if(PC.bTournamentReady)
            {
                MasonsReady += 1;
            }
        }
    }

    CorrectedAgathaSize = AgathaSize - AgathaMod;
    CorrectedMasonSize = MasonSize - MasonMod;

    bEachTeamHasAtleastOnePlayer = (CorrectedAgathaSize > 0 && CorrectedMasonSize > 0);

    if (bTournamentMode)
    {
        return
        (
            bEachTeamHasAtleastOnePlayer &&
            (
                // each team has more than the minimum tolerable amount of 'ready' players
                (
                    (AgathiansReady / float(CorrectedAgathaSize)) >= TournamentTeamReadyThreshold &&
                    (MasonsReady / float(CorrectedMasonSize)) >= TournamentTeamReadyThreshold
                )

                // or an admin forced the match to start
                || bAdminForcedTournamentReady
            )
        );
    }
    else if (bRankedMode)
    {
        return (bEachTeamHasAtleastOnePlayer && bRankedModeReadyToStartMatch);
    }
    else
    {
        return (bEachTeamHasAtleastOnePlayer || !bWaitForTeams);
    }
}

// Deprecated
function AdminTournamentMode(bool bEnable){}

reliable server function ConfigureTournamentMode(bool bEnable)
{
    bTournamentMode = bEnable;
    SaveConfig();

    class'AOCGame'.default.bTournamentMode = bEnable;
    class'AOCGame'.static.StaticSaveConfig();
}

reliable server function ConfigureRankedMode(bool bEnable)
{
    bRankedMode = bEnable;
    SaveConfig();

    class'`{GAMEMODE}'.default.bRankedMode = bEnable;
    class'`{GAMEMODE}'.static.StaticSaveConfig();
}

exec function TournamentMode(bool bEnable)
{
    if (bTournamentMode == bEnable)
        return;

    S_BroadcastServerMessage("Admin TournamentMode");

    if (bEnable)
        ConfigureRankedMode(false);

    ConfigureTournamentMode(bEnable);
    WorldInfo.ServerTravel("?restart", false);
}

exec function RankedMode(bool bEnable)
{
    if (bRankedMode == bEnable)
        return;

    S_BroadcastServerMessage("Admin RankedMode");

    if (bEnable)
        ConfigureTournamentMode(false);

    ConfigureRankedMode(bEnable);
    WorldInfo.ServerTravel("?restart", false);
}

reliable server function S_BroadcastServerMessage(string Message) {
    local AOCPlayerController PC;
    foreach WorldInfo.AllControllers(class'AOCPlayerController', PC)
    {
        PC.ReceiveChatMessage(Message, EFAC_ALL, false, false, , false);
    }
}


DefaultProperties
{
    PlayerControllerClass=class'`{GAMEMODE}PlayerController'
    DefaultPawnClass=class'`{GAMEMODE}Pawn'
    HUDType=class'`{GAMEMODE}HUD'

    PlayerReplicationInfoClass=class'`{GAMEMODE}PRI'

    //This is the name that shows in the server browser for this mod:
    ModDisplayString="ImbaMod"

    Families.Empty;
    Families(ECLASS_Archer)=class'ImbaModFamilyInfo_Agatha_Archer'
    Families(ECLASS_ManAtArms)=class'ImbaModFamilyInfo_Agatha_ManAtArms'
    Families(ECLASS_Vanguard)=class'ImbaModFamilyInfo_Agatha_Vanguard'
    Families(ECLASS_Knight)=class'ImbaModFamilyInfo_Agatha_Knight'
    Families(ECLASS_SiegeEngineer)=class'ImbaModFamilyInfo_Agatha_Archer'
    Families(5)=class'ImbaModFamilyInfo_Mason_Archer'
    Families(6)=class'ImbaModFamilyInfo_Mason_ManAtArms'
    Families(7)=class'ImbaModFamilyInfo_Mason_Vanguard'
    Families(8)=class'ImbaModFamilyInfo_Mason_Knight'
    Families(9)=class'ImbaModFamilyInfo_Mason_Archer'

    MinimumRespawnTime = 10.0f
    bDisableTeamDamagePenalty = true
}
