var string OriginalName;
var int AllDamageTaken,
        TeamDamageTaken,
        EnemyStaminaDamageDealt,
        TeamStaminaDamageDealt,
        EnemyStaminaDamageTaken,
        TeamStaminaDamageTaken,
        HealthRegenerated,
        Feints,
        MeleeHits,
        ProjectileHits,
        LightShoveHits,
        HeavyShoveHits,
        Parries,
        Blocks,
        Crouches,
        Jumps,
        Dodges,
        Chatter;
var float AllStaminaConsumed,
          StaminaRegenerated;


replication
{
    if (bNetDirty && bNetOwner)
        AllDamageTaken, AllStaminaConsumed, TeamDamageTaken, EnemyStaminaDamageDealt, TeamStaminaDamageDealt, EnemyStaminaDamageTaken, TeamStaminaDamageTaken,
        HealthRegenerated, StaminaRegenerated,
        Feints, MeleeHits, ProjectileHits, LightShoveHits, HeavyShoveHits,
        Parries, Blocks,
        Crouches, Jumps, Dodges,
        Chatter;
}


function PreSeamlessTravelReset()
{
    super.PreSeamlessTravelReset();

    AllDamageTaken = 0;
    AllStaminaConsumed = 0;
    TeamDamageTaken = 0;
    EnemyStaminaDamageDealt = 0;
    TeamStaminaDamageDealt = 0;
    EnemyStaminaDamageTaken = 0;
    TeamStaminaDamageTaken = 0;
    HealthRegenerated = 0;
    StaminaRegenerated = 0;
    Feints = 0;
    MeleeHits = 0;
    ProjectileHits = 0;
    LightShoveHits = 0;
    HeavyShoveHits = 0;
    Parries = 0;
    Blocks = 0;
    Crouches = 0;
    Jumps = 0;
    Dodges = 0;
    Chatter = 0;
}

function CopyProperties(PlayerReplicationInfo PRI)
{
    super.CopyProperties(PRI);

    AOCPRI(PRI).bAdmin = bAdmin;

    `{GAMEMODE}PRI(PRI).AllDamageTaken = AllDamageTaken;
    `{GAMEMODE}PRI(PRI).AllStaminaConsumed = AllStaminaConsumed;
    `{GAMEMODE}PRI(PRI).TeamDamageTaken = TeamDamageTaken;
    `{GAMEMODE}PRI(PRI).EnemyStaminaDamageDealt = EnemyStaminaDamageDealt;
    `{GAMEMODE}PRI(PRI).TeamStaminaDamageDealt = TeamStaminaDamageDealt;
    `{GAMEMODE}PRI(PRI).EnemyStaminaDamageTaken = EnemyStaminaDamageTaken;
    `{GAMEMODE}PRI(PRI).TeamStaminaDamageTaken = TeamStaminaDamageTaken;
    `{GAMEMODE}PRI(PRI).HealthRegenerated = HealthRegenerated;
    `{GAMEMODE}PRI(PRI).StaminaRegenerated = StaminaRegenerated;
    `{GAMEMODE}PRI(PRI).Feints = Feints;
    `{GAMEMODE}PRI(PRI).MeleeHits = MeleeHits;
    `{GAMEMODE}PRI(PRI).ProjectileHits = ProjectileHits;
    `{GAMEMODE}PRI(PRI).LightShoveHits = LightShoveHits;
    `{GAMEMODE}PRI(PRI).HeavyShoveHits = HeavyShoveHits;
    `{GAMEMODE}PRI(PRI).Parries = Parries;
    `{GAMEMODE}PRI(PRI).Blocks = Blocks;
    `{GAMEMODE}PRI(PRI).Crouches = Crouches;
    `{GAMEMODE}PRI(PRI).Jumps = Jumps;
    `{GAMEMODE}PRI(PRI).Dodges = Dodges;
    `{GAMEMODE}PRI(PRI).Chatter = Chatter;

    /*
        Preserve the original name which the player joined with.

        Why this is not done in a single line using either:

            - A dynamic cast for the current gamemode: `{GAMEMODE}PRI(PRI)...
                This fails because the current gamemode is not always the one we are transitioning to.

            - A common parent: ImbaModPRI(PRI)...
                This is preferably avoided since one must exclude the AOC leaf classes from each new classes heritage.

        Isn't that epic?
     */
    ImbaModAOCDuelPRI(PRI).OriginalName = OriginalName;
    ImbaModCDWDuelPRI(PRI).OriginalName = OriginalName;
    ImbaModCTFPRI(PRI).OriginalName = OriginalName;
    ImbaModFFAPRI(PRI).OriginalName = OriginalName;
    ImbaModKOTHPRI(PRI).OriginalName = OriginalName;
    ImbaModLTSPRI(PRI).OriginalName = OriginalName;
    ImbaModTDPRI(PRI).OriginalName = OriginalName;
    ImbaModTOPRI(PRI).OriginalName = OriginalName;
    ImbaModTUTPRI(PRI).OriginalName = OriginalName;
}


function SaveOriginalName()
{
    if (OriginalName == "")
        OriginalName = PlayerName;
}

function RestoreOriginalName()
{
    if (OriginalName != "" && OriginalName != PlayerName)
        SetPlayerName(OriginalName);
}

function JsonObject GetStatsObject()
{
    local JsonObject jStats;

    jStats = new class'JsonObject';

    jStats.SetIntValue("score",   Score);
    jStats.SetIntValue("kills",   NumKills);
    jStats.SetIntValue("deaths",  Deaths);
    jStats.SetIntValue("assists", NumAssists);

    jStats.SetIntValue("healthRegenerated",             HealthRegenerated);
    jStats.SetIntValue("healthDamageReceivedFromAll",   AllDamageTaken);
    jStats.SetIntValue("healthDamageReceivedFromEnemy", DamageTaken);
    jStats.SetIntValue("healthDamageReceivedFromTeam",  TeamDamageTaken);
    jStats.SetIntValue("healthDamageDealtToEnemy",      EnemyDamageDealt);
    jStats.SetIntValue("healthDamageDealtToTeam",       TeamDamageDealt);

    jStats.SetFloatValue("staminaRegenerated",           StaminaRegenerated);
    jStats.SetFloatValue("staminaDamageReceivedFromAll", AllStaminaConsumed);
    jStats.SetIntValue("staminaDamageReceivedFromEnemy", EnemyStaminaDamageTaken);
    jStats.SetIntValue("staminaDamageReceivedFromTeam",  TeamStaminaDamageTaken);
    jStats.SetIntValue("staminaDamageDealtToEnemy",      EnemyStaminaDamageDealt);
    jStats.SetIntValue("staminaDamageDealtToTeam",       TeamStaminaDamageDealt);

    jStats.SetIntValue("feints", Feints);

    jStats.SetIntValue("attacks",           NumAttacks);
    jStats.SetIntValue("successfulAttacks", NumHits);

    jStats.SetIntValue("meleeHits",      MeleeHits);
    jStats.SetIntValue("projectileHits", ProjectileHits);
    jStats.SetIntValue("lightShoveHits", LightShoveHits);
    jStats.SetIntValue("heavyShoveHits", HeavyShoveHits);

    jStats.SetIntValue("parries", Parries);
    jStats.SetIntValue("blocks",  Blocks);

    jStats.SetIntValue("crouches", Crouches);
    jStats.SetIntValue("jumps",    Jumps);
    jStats.SetIntValue("dodges",   Dodges);

    jStats.SetIntValue("objectivePoints", ObjPoints);

    jStats.SetIntValue("decapitations", NumDecaps);
    jStats.SetIntValue("chatter",       Chatter);

    return jStats;
}
